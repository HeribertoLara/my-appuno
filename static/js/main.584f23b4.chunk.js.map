{"version":3,"sources":["components/Formulario.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Formulario","props","registro","evento","preventDefault","opciones","method","headers","body","JSON","stringify","state","formData","fetch","then","respuesta","json","datos","console","log","obtenerDatosFn","catch","error","setInputValue","setState","target","name","value","fomData","onInput","this","onSubmit","type","placeholder","React","Component","App","obtenerDatos","response","users","data","map","user","index","key","lastname","email","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+NAwDeA,E,kDArDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAKVC,SAAW,SAAAC,GACPA,EAAOC,iBACP,IACIC,EAAW,CACXC,OAAQ,OACRC,QAAS,CACT,eAAgB,oBAEhBC,KAAMC,KAAKC,UAAU,EAAKC,MAAMC,WAGpCC,MATU,iDASCR,GACNS,MAAK,SAAAC,GACN,OAAOA,EAAUC,QAEhBF,MAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,EAAKhB,MAAMmB,oBAEVC,OAAM,SAAAC,GACPJ,QAAQC,IAAIG,OA1BF,EA+BlBC,cAAc,SAACpB,GACX,EAAKqB,SAAS,CACVZ,SAAS,2BACF,EAAKD,MAAMC,UADV,kBAEHT,EAAOsB,OAAOC,KAAOvB,EAAOsB,OAAOE,WAjC5C,EAAKhB,MAAM,CACPiB,QAAQ,IAHE,E,qDAwCd,OACI,6BACI,0BAAMC,QAASC,KAAKP,cAAeQ,SAAUD,KAAK5B,UAC9C,2BAAO8B,KAAK,OAAON,KAAK,OAAOO,YAAY,WAC3C,2BAAOD,KAAK,OAAON,KAAK,WAAWO,YAAY,aAC/C,2BAAOD,KAAK,QAAQN,KAAK,QAAQO,YAAY,WAC7C,2BAAOD,KAAK,WAAWN,KAAK,WAAWO,YAAY,kBACnD,2BAAOD,KAAK,SAASL,MAAM,4B,GAhDtBO,IAAMC,WC+DhBC,E,kDA9Db,aAAc,IAAD,8BACX,gBAiBFC,aAAe,WAEbxB,MADU,kDAEPC,MAAK,SAAAwB,GAAQ,OAAIA,EAAStB,UAC1BF,MAAK,SAAAG,GACJ,EAAKO,SAAS,CAAEe,MAAOtB,EAAMuB,OAC7BtB,QAAQC,IAAIF,MAEbI,OAAM,SAAAC,GAAK,OAAIJ,QAAQC,IAAIG,OAxB9B,EAAKX,MAAM,CACT4B,MAAM,IAHG,E,gEAeXT,KAAKO,iB,+BAcL,OAEA,6BACE,kBAAC,EAAD,CAAYjB,eAAgBU,KAAKO,eACjC,+BACE,4BACA,sCACY,wCACA,qCACA,0CAGTP,KAAKnB,MAAM4B,MAAME,KAAI,SAACC,EAAOC,GAC5B,OACE,yBAAKC,IAAMD,GACT,+BAEE,4BACE,4BAAKD,EAAKhB,MACV,4BAAKgB,EAAKG,UACV,4BAAKH,EAAKI,aAMpB,wC,GAxDQZ,IAAMC,WCUJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMwC,a","file":"static/js/main.584f23b4.chunk.js","sourcesContent":["import React from  \"react\";\r\n\r\nclass Formulario extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            fomData:{}\r\n        }\r\n    }\r\n    registro = evento => {\r\n        evento.preventDefault();\r\n        let url = \"https://academlo-api-users.herokuapp.com/users\";\r\n        let opciones = {\r\n            method: \"POST\",\r\n            headers: {\r\n            \"content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(this.state.formData)\r\n        };\r\n    \r\n        fetch(url, opciones)\r\n            .then(respuesta => {\r\n            return respuesta.json;\r\n            })\r\n            .then(datos => {\r\n            console.log(datos);\r\n            this.props.obtenerDatosFn();\r\n            })\r\n            .catch(error => {\r\n            console.log(error);\r\n            });\r\n    };\r\n    \r\n\r\n    setInputValue=(evento)=>{\r\n        this.setState({\r\n            formData:{\r\n                ...this.state.formData,\r\n                [evento.target.name]: evento.target.value\r\n            }\r\n        });\r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onInput={this.setInputValue} onSubmit={this.registro}>\r\n                    <input type=\"text\" name=\"name\" placeholder=\"nombre\"/>\r\n                    <input type=\"text\" name=\"lastname\" placeholder=\"Apellido\"/>\r\n                    <input type=\"email\" name=\"email\" placeholder=\"correo\"/>\r\n                    <input type=\"password\" name=\"password\" placeholder=\"contraseÃ±a\"/>\r\n                    <input type=\"Submit\" value=\"registrar usuario\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Formulario;","import React from 'react';\nimport Formulario from './components/Formulario'\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      users:[],\n    }\n  }\n /*  componentDidMount() {\n    //Obtener los posts\n    fetch(\"https://academlo-api-users.herokuapp.com/users\")\n      .then(response => response.json())\n      .then(results => this.setState({ users: results.data }))\n      .catch(error => console.log(error));\n      \n  } */\n  componentDidMount() {\n    this.obtenerDatos();\n  }\n\n  obtenerDatos = () => {\n    let url = \"https://academlo-api-users.herokuapp.com/users\";\n    fetch(url)\n      .then(response => response.json())\n      .then(datos => {\n        this.setState({ users: datos.data });\n        console.log(datos);\n      })\n      .catch(error => console.log(error));\n  };\n  render () {\n    return (\n     \n    <div> \n      <Formulario obtenerDatosFn={this.obtenerDatos} />\n      <table>\n        <th>\n        <th>Nombre</th>\n                    <th>Apellido</th>\n                    <th>Email</th>\n                    <th>password</th>\n        </th>\n      </table>\n          {this.state.users.map((user , index) => {\n            return (\n              <div key ={index}>\n                <table>\n              \n                  <tr>\n                    <td>{user.name}</td>\n                    <td>{user.lastname}</td>\n                    <td>{user.email}</td>\n                  </tr>\n                </table>\n              </div>\n            );\n          })} \n          <p>hola</p>\n  </div>\n  \n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}